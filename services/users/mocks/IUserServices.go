// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dto "discusiin/dto"
	models "discusiin/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserServices is an autogenerated mock type for the IUserServices type
type IUserServices struct {
	mock.Mock
}

// BanUser provides a mock function with given fields: token, userId, user
func (_m *IUserServices) BanUser(token dto.Token, userId int, user models.User) (dto.PublicUser, error) {
	ret := _m.Called(token, userId, user)

	var r0 dto.PublicUser
	if rf, ok := ret.Get(0).(func(dto.Token, int, models.User) dto.PublicUser); ok {
		r0 = rf(token, userId, user)
	} else {
		r0 = ret.Get(0).(dto.PublicUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.Token, int, models.User) error); ok {
		r1 = rf(token, userId, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: token, userId
func (_m *IUserServices) DeleteUser(token dto.Token, userId int) error {
	ret := _m.Called(token, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Token, int) error); ok {
		r0 = rf(token, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentAsAdmin provides a mock function with given fields: token, userId, page
func (_m *IUserServices) GetCommentAsAdmin(token dto.Token, userId int, page int) (models.User, []dto.AdminComment, int, error) {
	ret := _m.Called(token, userId, page)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(dto.Token, int, int) models.User); ok {
		r0 = rf(token, userId, page)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 []dto.AdminComment
	if rf, ok := ret.Get(1).(func(dto.Token, int, int) []dto.AdminComment); ok {
		r1 = rf(token, userId, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]dto.AdminComment)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(dto.Token, int, int) int); ok {
		r2 = rf(token, userId, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(dto.Token, int, int) error); ok {
		r3 = rf(token, userId, page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetPostAsAdmin provides a mock function with given fields: token, userId, page
func (_m *IUserServices) GetPostAsAdmin(token dto.Token, userId int, page int) (models.User, []dto.PublicPost, int, error) {
	ret := _m.Called(token, userId, page)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(dto.Token, int, int) models.User); ok {
		r0 = rf(token, userId, page)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 []dto.PublicPost
	if rf, ok := ret.Get(1).(func(dto.Token, int, int) []dto.PublicPost); ok {
		r1 = rf(token, userId, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]dto.PublicPost)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(dto.Token, int, int) int); ok {
		r2 = rf(token, userId, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(dto.Token, int, int) error); ok {
		r3 = rf(token, userId, page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetPostAsUser provides a mock function with given fields: token, page
func (_m *IUserServices) GetPostAsUser(token dto.Token, page int) ([]dto.PublicPost, int, error) {
	ret := _m.Called(token, page)

	var r0 []dto.PublicPost
	if rf, ok := ret.Get(0).(func(dto.Token, int) []dto.PublicPost); ok {
		r0 = rf(token, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PublicPost)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(dto.Token, int) int); ok {
		r1 = rf(token, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(dto.Token, int) error); ok {
		r2 = rf(token, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProfile provides a mock function with given fields: token, user
func (_m *IUserServices) GetProfile(token dto.Token, user models.User) (dto.PublicUser, error) {
	ret := _m.Called(token, user)

	var r0 dto.PublicUser
	if rf, ok := ret.Get(0).(func(dto.Token, models.User) dto.PublicUser); ok {
		r0 = rf(token, user)
	} else {
		r0 = ret.Get(0).(dto.PublicUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.Token, models.User) error); ok {
		r1 = rf(token, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersAdminNotIncluded provides a mock function with given fields: token, page
func (_m *IUserServices) GetUsersAdminNotIncluded(token dto.Token, page int) ([]dto.PublicUser, int, error) {
	ret := _m.Called(token, page)

	var r0 []dto.PublicUser
	if rf, ok := ret.Get(0).(func(dto.Token, int) []dto.PublicUser); ok {
		r0 = rf(token, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PublicUser)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(dto.Token, int) int); ok {
		r1 = rf(token, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(dto.Token, int) error); ok {
		r2 = rf(token, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: user
func (_m *IUserServices) Login(user models.User) (dto.Login, error) {
	ret := _m.Called(user)

	var r0 dto.Login
	if rf, ok := ret.Get(0).(func(models.User) dto.Login); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(dto.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *IUserServices) Register(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAdmin provides a mock function with given fields: user, token
func (_m *IUserServices) RegisterAdmin(user models.User, token dto.Token) error {
	ret := _m.Called(user, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User, dto.Token) error); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: token, user
func (_m *IUserServices) UpdateProfile(token dto.Token, user models.User) error {
	ret := _m.Called(token, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Token, models.User) error); ok {
		r0 = rf(token, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserServices creates a new instance of IUserServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserServices(t mockConstructorTestingTNewIUserServices) *IUserServices {
	mock := &IUserServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
